## Experimento psicologico con tonos
## PEBL Prueba de Percepción Auditiva (PA): Entrenamiento.
##
## Desarrollo por: Juan Sebastian Gomez Rosas
## Gráficos por: Carlos David Gómez Rosas
## Apoyo en paradigma y diseño por la Dra. María Elizabeth Mónica Carlier Torres
##
##  This program is free software: you can redistribute it and/or modify
##  it under the terms of the GNU General Public License as published by
##  the Free Software Foundation, either version 3 of the License, or
##  (at your option) any later version.
##
##  This program is distributed in the hope that it will be useful,
##  but WITHOUT ANY WARRANTY; without even the implied warranty of
##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License
##  along with this program.  If not, see <http://www.gnu.org/licenses/>.

define Start(lPar)
{
	#Parametros
	parametros <- [["duracion",75]]

	gParams <- CreateParameters(parametros, "parametros.par")

	#Variables
	duracion <- gParams.duracion

	#posiciones
	alturaFlechas <- 180
	alturaManos <- 250

	#Ajustes de ventana
	ventana <- MakeWindow("black")
	gVideoWidth <- 800
	gVideoHeight <- 600

	#Crear sonidos
	sonidoT1 <- LoadSound("bajo.wav")
	sonidoT2 <- LoadSound("alto.wav")

	#fuentes
	fontGreen <- MakeFont("com.ttf",1,40,
                      MakeColor("green"),
                      MakeColor("black"), 1)
	fontRed   <- MakeFont("com.ttf",1,40,
                      MakeColor("red"),
                      MakeColor("black"), 1)
  fontWhite   <- MakeFont("com.ttf",1,28,
                      MakeColor("white"),
                      MakeColor("black"), 1)
	fontWhite2   <- MakeFont("com.ttf",1,34,
                      MakeColor("white"),
                      MakeColor("black"), 1)


	flecha1 <- MakeImage("up.png")
	flecha2 <- MakeImage("down.png")

	mano1 <- MakeImage("mano.png")
	mano2 <- MakeImage("click.png")

	ayuda <- MakeLabel(" ",fontWhite2)
	resultado <- MakeLabel(" ",fontWhite)
	aviso <- MakeLabel("Repetición Número:",fontWhite)

	#Crear un archivo de registro para el paciente
	gFileOut <- FileOpenAppend(gSubNum+"_tonos_E.csv")
	FilePrint(gFileOut,"repeticion,correcto,tiempo")
	gSleepEasy <- 1

	#Dibujo de instrucciones
	label <- EasyLabel("Tonos altos y bajos DEMOSTRACIÓN.", gVideoWidth/2, 40, ventana, 18)
	label2 <- EasyLabel("Escucha el tono y oprime una tecla.", gVideoWidth/2, 80, ventana, 18)
	label3 <- EasyLabel("Presiona una tecla para comenzar.", gVideoWidth/2, 430, ventana, 18)
  labelB <- EasyLabel("Alto", gVideoWidth/3, alturaFlechas+80, ventana, 18)
	labelA <- EasyLabel("Bajo", 2*gVideoWidth/3, alturaFlechas+80, ventana, 18)

	AddObject(flecha1,ventana)
	AddObject(flecha2,ventana)

	Move(flecha1,gVideoWidth/3,alturaFlechas)
	Move(flecha2,2*gVideoWidth/3,alturaFlechas)

	#Label para ver resultados en pantalla
	AddObject(aviso,ventana)
	Move(aviso,gVideoWidth/2,500)

	#Label de resultados
	AddObject(resultado,ventana)
	Move(resultado,gVideoWidth/2,560)

	#Label de ayuda
	AddObject(ayuda,ventana)
	Move(ayuda,gVideoWidth/2,320)

	Draw()

	Print("Inicio de entrenamiento.")

	#Serie de 24 estimulos aleatorios
	estimulo <- Shuffle([1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,2,2,2])

	Draw()

	WaitForAnyKeyPress()

		#Probar 24 veces e imprimir el resultado en pantalla
		c <- 1
		score <- 0
		loop(i,estimulo)
			{
			SetText(aviso,"Repetición Número: " + c)
			SetFont(resultado, fontGreen)
			SetText(resultado," ")
			Draw()
			if(i==1){
				PlayForeground(sonidoT1)
				Wait(duracion)
				Stop(sonidoT1)
			} elseif(i==2){
				PlayForeground(sonidoT2)
				Wait(duracion)
				Stop(sonidoT2)
			}
			Draw()

		time1 <- GetTime()
		resp <- WaitForListKeyPress(["<up>","<down>","<esc>"])
		time2 <- GetTime()
		if(i == 1 and resp=="<down>")
			{
				SetText(resultado,"Correcto")
				score <- score + 1
				FilePrint(gFileOut,c+",si,"+(time2-time1))
				AddObject(mano2,ventana)
				Move(mano2,2*gVideoWidth/3,alturaManos)
				Draw()
				Wait(1000)
				RemoveObject(mano2,ventana)
				Draw()
			} elseif(i == 2 and resp=="<up>"){
				SetText(resultado,"Correcto")
				score <- score + 1
				FilePrint(gFileOut,c+",si,"+(time2-time1))
				AddObject(mano2,ventana)
				Move(mano2,gVideoWidth/3,alturaManos)
				Draw()
				Wait(1000)
				RemoveObject(mano2,ventana)
				Draw()
			}elseif(i == 1 and resp=="<up>")
				{
					SetFont(resultado, fontRed)
					SetText(resultado,"Incorrecto")
					FilePrint(gFileOut,c+",no,"+(time2-time1))
					AddObject(mano2,ventana)
					Move(mano2,2*gVideoWidth/3,alturaManos)
					Draw()
					Wait(1000)
					RemoveObject(mano2,ventana)
					Draw()
				} elseif(i == 2 and resp=="<down>"){
					SetFont(resultado, fontRed)
					SetText(resultado,"Incorrecto")
					FilePrint(gFileOut,c+",no,"+(time2-time1))
					AddObject(mano2,ventana)
					Move(mano2,gVideoWidth/3,alturaManos)
					Draw()
					Wait(1000)
					RemoveObject(mano2,ventana)
					Draw()
				} elseif(resp=="<esc>"){
				PopupMessageBox("Experimento abortado. Por favor cierre esta ventana.", ventana)
				FilePrint(gFileOut,"ABORTADO,ABORTADO,ABORTADO")
				break
			}
		Draw()
		Wait(1000)
		c <- c + 1
	}
	PopupMessageBox("Fin de etapa de entrenamiento. Aciertos: " + score + " de 24.", ventana)
}
